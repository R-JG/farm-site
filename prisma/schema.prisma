generator client {
  provider     = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model ShopItem {
  id           String    @id @default(cuid())
  name         String
  description  String
  price        Float
  inventory    Int?
  images       ShopItemImage[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model NewsPost {
  id           Int       @id @default(autoincrement())
  title        String
  content      String
  images       NewsPostImage[]
  link         String?
  linkText     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model BlogPost {
  id           Int       @id @default(autoincrement())
  title        String
  author       String
  content      String
  images       BlogPostImage[]
  date         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ShopItemImage {
  id           String    @id
  order        Int
  shopItemId   String
  shopItem     ShopItem  @relation(fields: [shopItemId], references: [id])
}

model NewsPostImage {
  id           String    @id
  newsPostId   Int
  newsPost     NewsPost  @relation(fields: [newsPostId], references: [id])
}

model BlogPostImage {
  id           String    @id
  blogPostId   Int
  blogPost     BlogPost  @relation(fields: [blogPostId], references: [id])
}

enum Role {
  USER
  ADMIN
}


// Next-Auth models: 

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}